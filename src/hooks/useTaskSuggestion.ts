import { useState, useEffect } from 'react'
import axios from 'axios'
import { toast } from 'react-toastify'
import { SuggestedAssignment } from '@/interfaces'

export const useTaskSuggestion = (
  brandId: string, 
  categoryId: string, 
  priority: string,
  // ‚úÖ Nuevos par√°metros para manejar categor√≠as manuales
  isNewCategory?: boolean,
  manualDuration?: string, // Duraci√≥n en d√≠as como string
  typeId?: number,
  triggerSuggestion?: number // ‚úÖ Para forzar actualizaci√≥n
) => {
  const [suggestedAssignment, setSuggestedAssignment] = useState<SuggestedAssignment | null>(null)
  const [fetchingSuggestion, setFetchingSuggestion] = useState(false)

  useEffect(() => {
    const getSuggestion = async () => {
      console.log('üîç useTaskSuggestion - Evaluating conditions:', {
        brandId,
        priority,
        isNewCategory,
        categoryId,
        manualDuration,
        typeId,
        triggerSuggestion
      });

      // ‚úÖ Si los par√°metros est√°n vac√≠os (durante env√≠o), no hacer nada
      if (!brandId || !priority) {
        console.log('‚ùå Missing brandId or priority - skipping suggestion')
        setSuggestedAssignment(null)
        setFetchingSuggestion(false)
        return
      }

      // ‚úÖ NUEVA L√ìGICA: Si hay duraci√≥n manual para cualquier tipo de categor√≠a
      if (manualDuration && parseFloat(manualDuration) > 0) {
        const durationDays = parseFloat(manualDuration)
        
        console.log('üîÑ Fetching suggestion with MANUAL DURATION:', {
          durationDays,
          isNewCategory,
          categoryId,
          typeId,
          brandId,
          priority
        });
        
        setFetchingSuggestion(true)
        
        try {
          let response;
          
          if (isNewCategory && typeId) {
            // Para nuevas categor√≠as, usar endpoint manual con typeId
            console.log('üÜï Using manual endpoint for NEW category')
            response = await axios.get(`/api/tasks/suggestion/manual`, {
              params: { 
                brandId, 
                typeId, 
                priority, 
                durationDays 
              },
            })
          } else if (!isNewCategory && categoryId) {
            // ‚úÖ NUEVO: Para categor√≠as existentes con duraci√≥n manual, usar endpoint h√≠brido
            console.log('üîß Using hybrid endpoint for EXISTING category with manual duration')
            response = await axios.get(`/api/tasks/suggestion/hybrid`, {
              params: { 
                brandId, 
                categoryId, 
                priority,
                manualDuration: durationDays // ‚úÖ NUEVO: Pasar duraci√≥n manual
              },
            })
          } else {
            console.log('‚ùå Invalid combination for manual duration suggestion')
            setSuggestedAssignment(null)
            setFetchingSuggestion(false)
            return
          }
          
          const { suggestedUserId } = response.data
          
          setSuggestedAssignment({
            userId: suggestedUserId,
            durationDays: durationDays, // ‚úÖ Usar duraci√≥n manual
          })

          console.log('‚úÖ Sugerencia obtenida con duraci√≥n manual:', {
            userId: suggestedUserId,
            durationDays: durationDays
          })
          
        } catch (error) {
          console.error('Error al obtener sugerencia con duraci√≥n manual:', error)
          setSuggestedAssignment(null)
          if (axios.isAxiosError(error) && error.response?.status !== 400) {
            toast.error('Error al obtener sugerencia de asignaci√≥n.')
          }
        } finally {
          setFetchingSuggestion(false)
        }
        
        return
      }

      // ‚úÖ Para categor√≠as existentes SIN duraci√≥n manual (usa duraci√≥n de categor√≠a)
      if (!isNewCategory && categoryId && !manualDuration) {
        console.log('üîÑ Fetching suggestion for existing category WITHOUT manual duration')
        setFetchingSuggestion(true)
        try {
          const response = await axios.get(`/api/tasks/suggestion/hybrid`, {
            params: { brandId, categoryId, priority },
          })
          
          const { suggestedUserId, estimatedDurationHours } = response.data
          const estimatedDurationDays = estimatedDurationHours / 8

          setSuggestedAssignment({
            userId: suggestedUserId,
            durationDays: estimatedDurationDays,
          })
        } catch (error) {
          console.error('Error al obtener sugerencia para categor√≠a existente:', error)
          setSuggestedAssignment(null)
          if (axios.isAxiosError(error) && error.response?.status !== 400) {
            toast.error('Error al obtener sugerencia de asignaci√≥n.')
          }
        } finally {
          setFetchingSuggestion(false)
        }
      }
      // ‚úÖ Limpiar sugerencia si no hay datos suficientes
      else {
        setSuggestedAssignment(null)
      }
    }

    getSuggestion()
  }, [brandId, categoryId, priority, isNewCategory, manualDuration, typeId, triggerSuggestion])

  return { suggestedAssignment, fetchingSuggestion }
}